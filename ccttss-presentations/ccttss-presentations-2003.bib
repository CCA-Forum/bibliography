
@Misc{Benson:2003:TAO,
  author	= {Steve Benson and Lois Curfman McInnes and Jorge Mor\'{e}
		  and Jason Sarich},
  title		= {The Toolkit for Advanced Optimization},
  howpublished	= {invited presentation in a minisymposium on A Toolkit
		  Approach to Parallel Application Development, SIAM
		  Conference on Computational Science and Engineering},
  month		= {12 February},
  year		= 2003,
  keywords	= {CCA, CCTTSS, ANL}
}

@Misc{Benson:2003:STL,
  author	= {Steve Benson},
  title		= {Software Tools for Large-Scale Numerical Applications},
  howpublished	= {invited colloquium, Department of Management Science and
		  Engineering, Stanford University},
  month		= {22 January},
  year		= 2003,
  keywords	= {CCA, CCTTSS, ANL}
}

@Misc{Bernholdt:2003:ICC,
  author	= {David E. Bernholdt and Gary Kumfert},
  title		= {An Introduction to the Common Component Architecture},
  howpublished	= {invited talk, Joint SWMF-ESMF Interoperability and Model
		  Coupling Workshop, University of Michigan, Ann Arbor,
		  Michigan },
  month		= {February},
  year		= 2003,
  keywords	= {CCA, CCTTSS, ORNL, LLNL}
}

@Misc{Bernholdt:2003:CSC,
  author	= {David E. Bernholdt},
  title		= {Components for Scientific Computing: An Introduction},
  howpublished	= {talk, SIAM Computational Science and Engineering '03, San
		  Diego, California},
  month		= {February},
  year		= 2003,
  ornlauthoraffil={ORNL},
  ornlconfdate	= {10-13 February 2003},
  ornlconfinfo	= {not invited, unpublished, international},
  keywords	= {CCA, CCTTSS, ORNL}
}

@Misc{Bernholdt:2003:HSS,
  author	= {David E. Bernholdt},
  title		= {High-Performance Scientific Software Development: Two
		  Glimpses into the Future},
  howpublished	= {seminar, Quantum Theory Project, University of Florida,
		  Gainesville, Florida},
  month		= {January},
  year		= 2003,
  keywords	= {CCA, CCTTSS, ORNL}
}

@Misc{Bernholdt:2003:CCA,
  author	= {David E. Bernholdt},
  title		= {The Common Component Architecture},
  howpublished	= {invited talk, High Productivity Computing Systems Workshop
		  on Software Productivity, Arlington, Virginia},
  month		= {January},
  year		= 2003,
  ornlauthoraffil={ORNL},
  ornlconfdate	= {15-16 January 2003},
  ornlconfinfo	= {invited, unpublished, other},
  keywords	= {CCA, CCTTSS, ORNL}
}

@Misc{Dahlgren:2003:BTC,
  author	= {Tamara Dahlgren and Thomas Epperly and Gary Kumfert},
  title		= {Babel: Technical and Cultural Hurdles We've Cleared, and
		  Others Coming In Fast},
  howpublished	= {CASC Works In Progress Seminar Series, Lawrence Livermore
		  National Laboratory, Livermore, California},
  month		= {January},
  year		= 2003,
  keywords	= {CCA, CCTTSS, LLNL}
}

@Misc{Rasmussen:2003:CLI,
  author	= {Craig Rasmussen and Matthew Sottile},
  title		= {Computer Language Interoperability Using Chasm},
  howpublished	= {seminar, Department of Computer Science, University of New
		  Mexico, Albuquerque, New Mexico},
  month		= {February},
  year		= 2003,
  keywords	= {CCA, CCTTSS, LANL}
}

@InProceedings{Ray:2003:CBS,
  author	= {Jaideep Ray and Sophia Lefantzi and Habib N. Najm},
  title		= {CCA-Component Based Simulation of Flows on Adaptively
		  Refined Structured Meshes},
  booktitle	= {Minisymposium on Computational Science in Component-Based
		  Environments, SIAM Conference on Computational Science and
		  Engineering},
  year		= {2003},
  address	= {San Diego, CA},
  month		= {February},
  keywords	= {CCA, CCTTSS, SNL}
}

Sophia Lefantzi, Jaideep Ray, and Sameer Shende, "Strong Scalability
Analysis and Performance Evaluation of a SAMR CCA-based Reacting Flow
Code," Poster, SC2003 Conference, Nov. 2003.

Simulations on structured adaptively refined meshes (SAMR) pose unique problems in the context of performance evaluation and modeling. Adaptively refined meshes aim to concentrate grid points in regions of interest while leaving the bulk of the domain sparsely tessellated. Structured adaptively refined meshes achieve this by having overlaid grids of different refinement. Numerical algorithms employing explicit multi-rated time- stepping methods apply a computational "kernel" to the finer meshes at a higher frequency than at the coarser meshes. Each application of the kernel at a given level of refinement is followed up by a communication step where data is exchanged with neighboring subdomains. The SAMR approach is adaptive, i.e. its characteristics change as the simulation evolves in time. Thus, scalability depends on the number of processors and the time-integrated effect of the physics of the problem. The time-integrated effect renders the estimation of a general metric of scalability difficult and often impossible. Generally, as reported in the literature, for realistic problems and configurations, SAMR simulations do not scale well. For this work we analyzed two different hydrodynamic problems and present how communication costs scale with various aspects of the domain decomposition. Approach: The codes that we analyzed solve PDEs to simulate reactive flows and flows with shock waves. The codes were run until the incremental decrease in run times (with increasing processors) approached zero. It was found that the nature of the problem changed vastly during the run - even runs which showed poor scaling had periods of evolution where the domain decomposition showed "good" scaling characteristics, i.e compute loads were higher than communication loads. The computational load was found to be evenly balanced across the processors - the lack of scalability was due to the dominance of communication and synchronization costs over computational costs. We identified and analyzed phases in the evolution of the problem where the simulation exhibited good and bad scaling. Communication costs were analyzed with respect to the levels of refinement of the grid as well as the data-exchange radius for each of the runs. This is a thorough performance analysis of SAMR hydrodynamics codes, performed for the first time in CCA-compliant codes, tackling the time-dependent nature of the communication overheads. Both the codes that we analyzed employ the Common Component Architecture (CCA) paradigm and were run within the CCAFFEINE framework. The adaptive mesh package used (that performs the bulk of the communications) was GrACE (Rutgers, The State University of New Jersey). The measurements were performed using the CCA version of TAU (Tuning and Analysis Utilities). The tests were performed on "platinum" at NCSA (University of Illinois, Urbana Champaign), a Linux cluster of dual-node Pentium III 1 GHz processors, connected via a Myrinet interconnect. Visual: As a part of the visual presentation, we will present a color poster with our performance analysis results and hold a demonstration of the composition and execution of CCA codes. Animations of the adaptively refined grid will also be shown.

http://www.cs.uoregon.edu/research/paraducks/publ/htbin/bibify.cgi?cmd=show&coll=CONF&id=sc2003.poster&data_present=no
